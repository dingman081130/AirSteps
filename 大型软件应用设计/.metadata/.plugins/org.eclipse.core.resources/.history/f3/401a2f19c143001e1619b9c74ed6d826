package puzzle;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.io.*;
import javax.swing.filechooser.*;

public class PuzzleGame extends JFrame implements ActionListener{
	
	PuzzlePad puzzlePad;	//拼图游戏体
	JMenuBar bar;			//菜单栏
	JMenu gradeMenu, choiceImage;	//等级菜单 选择图像
	JMenuItem oneGrade, twoGrade, newImage, defaultImage;	//菜单项
	JRadioButton digitPlay, imagePlay;	//数字玩法或图像玩法
	ButtonGroup group = null;
	JButton startButton;
	Image image;
	Toolkit tool;
	String user;
	
	public PuzzleGame( String _user ){
		user = _user;
		tool = this.getToolkit();
		bar = new JMenuBar();
		gradeMenu = new JMenu( "选择级别" );
		choiceImage = new JMenu( "选择图像" );
		oneGrade = new JMenuItem( "初级" );
		twoGrade = new JMenuItem( "高级" );
		newImage = new JMenuItem( "选择一幅新图像" );
		defaultImage = new JMenuItem( "使用默认图像" );
		gradeMenu.add( oneGrade );
		gradeMenu.add( twoGrade );
		choiceImage.add( newImage );
		choiceImage.add( defaultImage );
		bar.add( gradeMenu );
		bar.add( choiceImage );
		setJMenuBar( bar );
		oneGrade.addActionListener( this );
		twoGrade.addActionListener( this );
		newImage.addActionListener( this );
		defaultImage.addActionListener( this );
		startButton = new JButton( "开始" );
		startButton.addActionListener( this );
		group = new ButtonGroup();
		digitPlay = new JRadioButton( "数字玩法", true );
		imagePlay = new JRadioButton( "图像玩法", false );
		group.add( digitPlay );
		group.add( imagePlay );
		
		puzzlePad = new PuzzlePad();
		puzzlePad.setGrade( 1 );
		puzzlePad.setIsDigitPlay();
		this.add( puzzlePad, BorderLayout.CENTER );
		JPanel pNorth = new JPanel();
		pNorth.add( digitPlay );
		pNorth.add( imagePlay );
		pNorth.add( startButton );
		pNorth.add( new JLabel( "如果图像不能立刻显示，请再单击一次按钮" ) );
		this.add( pNorth, BorderLayout.NORTH );
		this.add( puzzlePad.getHandleMove(), BorderLayout.SOUTH );
		this.validate();
		this.setVisible( true );
		this.setSize( 550, 380 );
		this.setLocation( ( int )( this.getToolkit().getScreenSize().getWidth() - this.getWidth() ) / 2, 
				( int )( this.getToolkit().getScreenSize().getHeight() - this.getHeight() ) / 2  );
		this.setDefaultCloseOperation( JFrame.DISPOSE_ON_CLOSE );
		this.setTitle( user );
		try{
			image = tool.createImage( new File( "dingman.jpg" ).toURI().toURL() );
			puzzlePad.setImage( image );
		}catch( Exception exp ){}
	}
	
	public void actionPerformed( ActionEvent e ){
		if( e.getSource() == startButton ){
			if( digitPlay.isSelected() ){
				puzzlePad.setIsDigitPlay();
			}else if( imagePlay.isSelected() ){
				puzzlePad.setImage( image );
				puzzlePad.setIsImagePlay();
			}
		}else if( e.getSource() == oneGrade ){
			puzzlePad.setGrade( 1 );
		}else if( e.getSource() == twoGrade ){
			puzzlePad.setGrade( 2 );
		}else if( e.getSource() == newImage ){
			FileNameExtensionFilter filter =  new FileNameExtensionFilter(
			"JPG & GIF Images", "jpg", "gif");
			JFileChooser chooser = new JFileChooser();
			chooser.setFileFilter( filter );
			int state = chooser.showOpenDialog( null );
			File file = chooser.getSelectedFile();
			if( file != null && state == JFileChooser.APPROVE_OPTION ){
				try{
					image = tool.createImage( file.toURI().toURL() );
					puzzlePad.setImage( image );
				}catch( Exception exp ){}
			}
		}else if( e.getSource() == defaultImage ){
			try{
				image = tool.createImage( new File( "dingman.jpg" ).toURI().toURL() );
				puzzlePad.setImage( image );
			}catch( Exception exp ){}
		}
	}
	
/*	public static void main( String args[] ){
		new PuzzleGame();
	}*/

}
